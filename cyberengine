#!/usr/bin/env ruby
require_relative 'lib/cyberengine'
require 'pty'

# Put arguments in local variable
@args = ARGV.dup

# Available commands
@commands = Hash.new
@commands['help'] = "Show help text"
@commands['list'] = "Show all checks and enabled/disabled status"
@commands['enabled'] = "Show enabled checks"
@commands['disabled'] = "Show disabled checks"
@commands['enable'] = "Enable checks"
@commands['disable'] = "Disable checks"
@commands['start'] = "Start checks"
@commands['stop'] = "Stop checks"
@commands['status'] = "Show running checks"
@commands['errors'] = "Show errors"
@commands['tail'] = "Tail check log file"
@commands['logs'] = "Print all log files"
@commands['pids'] = "Print all pid files"
@commands['test'] = "Start check in test mode"

@ids = Array.new
@checks = Hash.new
check_files = Dir.glob(Cyberengine.checks_dir + '/**/*').select {|file| File.file?(file) }.sort
check_files.each do |check| 
  check = Cyberengine.checkify(check)
  @checks[check[:id]] = check
end

# Show all log files
def logs 
  @ids.each do |id| 
    log_file = @checks[id][:log_file]
    if File.exists?(log_file) && File.readable?(log_file)
      puts id + ' : ' + Cyberengine.green(log_file)
    else
      puts id + ' : ' + Cyberengine.red(log_file)
    end
  end
end

# Show all pid files
def pids
  @ids.each do |id|
    pid_file = @checks[id][:pid_file]
    if File.exists?(pid_file) && File.readable?(pid_file)
      puts id + ' : ' + Cyberengine.green(pid_file)
    else
      puts id + ' : ' + Cyberengine.red(pid_file)
    end
  end
end


# Start checks
def start
  @ids.each do |id|
    print "Starting: #{id} : "
    result = Cyberengine.start_daemon_check(@checks[id])
    if result[:status]
      puts Cyberengine.green('Success') + ' : ' + result[:message]
    else 
      puts Cyberengine.red('Failed') + ' : ' + result[:message]
    end
  end
end

# Stop checks
def stop
  @ids.each do |id|
    print "Stopping #{id} : "
    result = Cyberengine.stop_check(@checks[id])
    if result[:status]
      puts Cyberengine.green('Success') + ' : ' + result[:message]
    else 
      puts Cyberengine.red('Failed') + ' : ' + result[:message]
    end
  end
end

# Start checks in test mode
def test
  @ids.each do |id|
    puts "Testing: #{id}"
    Cyberengine.start_test_check(@checks[id]) do |output|
      puts output
    end
  end
end

# tail checks log files
def tail
  tail = 'tail -f -n0 '
  @ids.each do |id|
    log_file = @checks[id][:log_file]
    tail << log_file + ' ' if File.exists?(log_file) && File.readable?(log_file)
  end
  Cyberengine.shellexecute(tail) do |output|
    puts output
  end
end

# Print checks errors
def errors
  @ids.each do |id|
    puts "Checking: #{id}"
    Cyberengine.find_check_errors(@checks[id]) do |output|
      puts output
    end
  end
end

# List enabled/disabled checks
def list
  @ids.each do |id|
    print Cyberengine.green('Enabled') if Cyberengine.check_enabled?(@checks[id]) 
    print Cyberengine.red('Disabled') if Cyberengine.check_disabled?(@checks[id]) 
    puts ' : ' + id
  end
end

# List enabled checks
def enabled
  @ids.each do |id|
    if Cyberengine.check_enabled?(@checks[id]) 
      puts Cyberengine.green('Enabled') + ' : ' + id
    end
  end
end

# List disabled checks
def disabled
  @ids.each do |id|
    if Cyberengine.check_disabled?(@checks[id]) 
      puts Cyberengine.red('Disabled') + ' : ' + id
    end
  end
end

# Disable checks
def disable
  @ids.each do |id|
    result = Cyberengine.disable_check(@checks[id])
    if result[:status]
      puts Cyberengine.red('Disabled') + ' : ' + id + ' : ' + result[:message]
    else
      puts Cyberengine.red('Failed') + ' : ' + id + ' : ' + result[:message]
    end
  end
end

# Enable checks
def enable
  @ids.each do |id|
    result = Cyberengine.enable_check(@checks[id])
    if result[:status]
      puts Cyberengine.green('Enabled') + ' : ' + id + ' : ' + result[:message]
    else
      puts Cyberengine.red('Failed') + ' : ' + id + ' : ' + result[:message]
    end
  end
end

# Running checks
def status
  @ids.each do |id|
    if Cyberengine.check_enabled?(@checks[id])
      print Cyberengine.green('Enabled') + ' : ' 
      status = Cyberengine.check_running?(@checks[id])
      print status[:status] ? Cyberengine.green(status[:message]) : Cyberengine.red(status[:message])
      print ' : '
    else 
      print Cyberengine.red('Disabled') + ' : ' 
      status = Cyberengine.check_running?(@checks[id])
      print status[:status] ? Cyberengine.green(status[:message]) : Cyberengine.red(status[:message])
      print ' : '
    end
    puts id 
  end
end

# Help text
def help 
  puts "Syntax: cyberengine.rb <command> [<check>]..."
  puts ""
  puts "<check>:"
  puts "all => match all checks"
  puts "ipv4/icmp/ping => match ipv4/icmp/ping check only"
  puts ""
  puts "<command>:"
  @commands.keys.sort.each {|k| puts "#{k} => #{@commands[k]}"}
end




# Get command
@command = @args.first.to_s.downcase || 'help'
@args.delete_at(0) if @args.first

# Get list of id's
if @args.include?('all')
  @checks.each { |id,check| @checks[id] ? @ids << id : puts("Ignoring unknown check: #{id}") }
else
  @args.each {|id| @checks[id] ? @ids << id : puts("Ignoring unknown check: #{id}") }
end

# Sort checks
@args.sort!

# Execute command
@commands.keys.include?(@command) ? send(@command) : send('help') 
